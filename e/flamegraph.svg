<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="404"><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.25%)</title><rect x="0.0000%" y="277" width="0.2475%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.25%)</title><rect x="0.2475%" y="261" width="0.2475%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.4975%" y="271.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.25%)</title><rect x="0.4950%" y="261" width="0.2475%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.7450%" y="271.50"></text></g><g><title>e`alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="0.4950%" y="245" width="0.2475%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.7450%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.25%)</title><rect x="0.4950%" y="229" width="0.2475%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.7450%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.25%)</title><rect x="0.4950%" y="213" width="0.2475%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.7450%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.25%)</title><rect x="0.4950%" y="197" width="0.2475%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.7450%" y="207.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (7 samples, 1.73%)</title><rect x="0.7426%" y="245" width="1.7327%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="7"/><text x="0.9926%" y="255.50"></text></g><g><title>e`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="2.4752%" y="245" width="0.2475%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="2.7252%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.25%)</title><rect x="2.7228%" y="181" width="0.2475%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="1"/><text x="2.9728%" y="191.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.50%)</title><rect x="2.7228%" y="245" width="0.4950%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="2"/><text x="2.9728%" y="255.50"></text></g><g><title>e`alloc::raw_vec::finish_grow (2 samples, 0.50%)</title><rect x="2.7228%" y="229" width="0.4950%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="2"/><text x="2.9728%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.50%)</title><rect x="2.7228%" y="213" width="0.4950%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="2"/><text x="2.9728%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.50%)</title><rect x="2.7228%" y="197" width="0.4950%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="2"/><text x="2.9728%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.25%)</title><rect x="2.9703%" y="181" width="0.2475%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="1"/><text x="3.2203%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="2.9703%" y="165" width="0.2475%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="1"/><text x="3.2203%" y="175.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (10 samples, 2.48%)</title><rect x="3.2178%" y="229" width="2.4752%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="10"/><text x="3.4678%" y="239.50">e`..</text></g><g><title>e`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="5.6931%" y="229" width="0.2475%" height="15" fill="rgb(210,31,41)" fg:x="23" fg:w="1"/><text x="5.9431%" y="239.50"></text></g><g><title>e`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="5.9406%" y="229" width="0.2475%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="1"/><text x="6.1906%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="6.6832%" y="165" width="0.2475%" height="15" fill="rgb(226,26,5)" fg:x="27" fg:w="1"/><text x="6.9332%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.25%)</title><rect x="6.9307%" y="165" width="0.2475%" height="15" fill="rgb(249,33,26)" fg:x="28" fg:w="1"/><text x="7.1807%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 1.24%)</title><rect x="6.4356%" y="181" width="1.2376%" height="15" fill="rgb(235,183,28)" fg:x="26" fg:w="5"/><text x="6.6856%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.50%)</title><rect x="7.1782%" y="165" width="0.4950%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="2"/><text x="7.4282%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.50%)</title><rect x="7.1782%" y="149" width="0.4950%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="2"/><text x="7.4282%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 1.73%)</title><rect x="6.4356%" y="197" width="1.7327%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="7"/><text x="6.6856%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.50%)</title><rect x="7.6733%" y="181" width="0.4950%" height="15" fill="rgb(249,31,29)" fg:x="31" fg:w="2"/><text x="7.9233%" y="191.50"></text></g><g><title>e`alloc::raw_vec::finish_grow (9 samples, 2.23%)</title><rect x="6.1881%" y="213" width="2.2277%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="9"/><text x="6.4381%" y="223.50">e..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.25%)</title><rect x="8.1683%" y="197" width="0.2475%" height="15" fill="rgb(238,160,17)" fg:x="33" fg:w="1"/><text x="8.4183%" y="207.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 2.48%)</title><rect x="6.1881%" y="229" width="2.4752%" height="15" fill="rgb(214,148,48)" fg:x="25" fg:w="10"/><text x="6.4381%" y="239.50">e`..</text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.25%)</title><rect x="8.4158%" y="213" width="0.2475%" height="15" fill="rgb(232,36,49)" fg:x="34" fg:w="1"/><text x="8.6658%" y="223.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (13 samples, 3.22%)</title><rect x="9.1584%" y="213" width="3.2178%" height="15" fill="rgb(209,103,24)" fg:x="37" fg:w="13"/><text x="9.4084%" y="223.50">e`&lt;..</text></g><g><title>e`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.74%)</title><rect x="12.3762%" y="213" width="0.7426%" height="15" fill="rgb(229,88,8)" fg:x="50" fg:w="3"/><text x="12.6262%" y="223.50"></text></g><g><title>e`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="13.1188%" y="213" width="0.2475%" height="15" fill="rgb(213,181,19)" fg:x="53" fg:w="1"/><text x="13.3688%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="14.3564%" y="149" width="0.2475%" height="15" fill="rgb(254,191,54)" fg:x="58" fg:w="1"/><text x="14.6064%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (4 samples, 0.99%)</title><rect x="14.6040%" y="149" width="0.9901%" height="15" fill="rgb(241,83,37)" fg:x="59" fg:w="4"/><text x="14.8540%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="15.5941%" y="133" width="0.2475%" height="15" fill="rgb(233,36,39)" fg:x="63" fg:w="1"/><text x="15.8441%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 1.73%)</title><rect x="14.3564%" y="165" width="1.7327%" height="15" fill="rgb(226,3,54)" fg:x="58" fg:w="7"/><text x="14.6064%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.50%)</title><rect x="15.5941%" y="149" width="0.4950%" height="15" fill="rgb(245,192,40)" fg:x="63" fg:w="2"/><text x="15.8441%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.25%)</title><rect x="15.8416%" y="133" width="0.2475%" height="15" fill="rgb(238,167,29)" fg:x="64" fg:w="1"/><text x="16.0916%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (10 samples, 2.48%)</title><rect x="13.8614%" y="181" width="2.4752%" height="15" fill="rgb(232,182,51)" fg:x="56" fg:w="10"/><text x="14.1114%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.25%)</title><rect x="16.0891%" y="165" width="0.2475%" height="15" fill="rgb(231,60,39)" fg:x="65" fg:w="1"/><text x="16.3391%" y="175.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 3.22%)</title><rect x="13.3663%" y="213" width="3.2178%" height="15" fill="rgb(208,69,12)" fg:x="54" fg:w="13"/><text x="13.6163%" y="223.50">e`a..</text></g><g><title>e`alloc::raw_vec::finish_grow (11 samples, 2.72%)</title><rect x="13.8614%" y="197" width="2.7228%" height="15" fill="rgb(235,93,37)" fg:x="56" fg:w="11"/><text x="14.1114%" y="207.50">e`..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.25%)</title><rect x="16.3366%" y="181" width="0.2475%" height="15" fill="rgb(213,116,39)" fg:x="66" fg:w="1"/><text x="16.5866%" y="191.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (25 samples, 6.19%)</title><rect x="17.3267%" y="197" width="6.1881%" height="15" fill="rgb(222,207,29)" fg:x="70" fg:w="25"/><text x="17.5767%" y="207.50">e`&lt;T as ..</text></g><g><title>e`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="23.5149%" y="197" width="0.2475%" height="15" fill="rgb(206,96,30)" fg:x="95" fg:w="1"/><text x="23.7649%" y="207.50"></text></g><g><title>e`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.50%)</title><rect x="23.7624%" y="197" width="0.4950%" height="15" fill="rgb(218,138,4)" fg:x="96" fg:w="2"/><text x="24.0124%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.25%)</title><rect x="25.4950%" y="133" width="0.2475%" height="15" fill="rgb(250,191,14)" fg:x="103" fg:w="1"/><text x="25.7450%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.74%)</title><rect x="25.7426%" y="117" width="0.7426%" height="15" fill="rgb(239,60,40)" fg:x="104" fg:w="3"/><text x="25.9926%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (8 samples, 1.98%)</title><rect x="25.0000%" y="165" width="1.9802%" height="15" fill="rgb(206,27,48)" fg:x="101" fg:w="8"/><text x="25.2500%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 1.73%)</title><rect x="25.2475%" y="149" width="1.7327%" height="15" fill="rgb(225,35,8)" fg:x="102" fg:w="7"/><text x="25.4975%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 1.24%)</title><rect x="25.7426%" y="133" width="1.2376%" height="15" fill="rgb(250,213,24)" fg:x="104" fg:w="5"/><text x="25.9926%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.50%)</title><rect x="26.4851%" y="117" width="0.4950%" height="15" fill="rgb(247,123,22)" fg:x="107" fg:w="2"/><text x="26.7351%" y="127.50"></text></g><g><title>e`alloc::raw_vec::finish_grow (11 samples, 2.72%)</title><rect x="24.5050%" y="181" width="2.7228%" height="15" fill="rgb(231,138,38)" fg:x="99" fg:w="11"/><text x="24.7550%" y="191.50">e`..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.25%)</title><rect x="26.9802%" y="165" width="0.2475%" height="15" fill="rgb(231,145,46)" fg:x="109" fg:w="1"/><text x="27.2302%" y="175.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 3.47%)</title><rect x="24.2574%" y="197" width="3.4653%" height="15" fill="rgb(251,118,11)" fg:x="98" fg:w="14"/><text x="24.5074%" y="207.50">e`a..</text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.50%)</title><rect x="27.2277%" y="181" width="0.4950%" height="15" fill="rgb(217,147,25)" fg:x="110" fg:w="2"/><text x="27.4777%" y="191.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (19 samples, 4.70%)</title><rect x="28.4653%" y="181" width="4.7030%" height="15" fill="rgb(247,81,37)" fg:x="115" fg:w="19"/><text x="28.7153%" y="191.50">e`&lt;T ..</text></g><g><title>e`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="33.1683%" y="181" width="0.2475%" height="15" fill="rgb(209,12,38)" fg:x="134" fg:w="1"/><text x="33.4183%" y="191.50"></text></g><g><title>e`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="33.4158%" y="181" width="0.2475%" height="15" fill="rgb(227,1,9)" fg:x="135" fg:w="1"/><text x="33.6658%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="34.4059%" y="117" width="0.2475%" height="15" fill="rgb(248,47,43)" fg:x="139" fg:w="1"/><text x="34.6559%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.25%)</title><rect x="34.6535%" y="117" width="0.2475%" height="15" fill="rgb(221,10,30)" fg:x="140" fg:w="1"/><text x="34.9035%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (6 samples, 1.49%)</title><rect x="33.9109%" y="133" width="1.4851%" height="15" fill="rgb(210,229,1)" fg:x="137" fg:w="6"/><text x="34.1609%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.50%)</title><rect x="34.9010%" y="117" width="0.4950%" height="15" fill="rgb(222,148,37)" fg:x="141" fg:w="2"/><text x="35.1510%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.50%)</title><rect x="34.9010%" y="101" width="0.4950%" height="15" fill="rgb(234,67,33)" fg:x="141" fg:w="2"/><text x="35.1510%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (8 samples, 1.98%)</title><rect x="33.6634%" y="149" width="1.9802%" height="15" fill="rgb(247,98,35)" fg:x="136" fg:w="8"/><text x="33.9134%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.25%)</title><rect x="35.3960%" y="133" width="0.2475%" height="15" fill="rgb(247,138,52)" fg:x="143" fg:w="1"/><text x="35.6460%" y="143.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 2.48%)</title><rect x="33.6634%" y="181" width="2.4752%" height="15" fill="rgb(213,79,30)" fg:x="136" fg:w="10"/><text x="33.9134%" y="191.50">e`..</text></g><g><title>e`alloc::raw_vec::finish_grow (10 samples, 2.48%)</title><rect x="33.6634%" y="165" width="2.4752%" height="15" fill="rgb(246,177,23)" fg:x="136" fg:w="10"/><text x="33.9134%" y="175.50">e`..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.50%)</title><rect x="35.6436%" y="149" width="0.4950%" height="15" fill="rgb(230,62,27)" fg:x="144" fg:w="2"/><text x="35.8936%" y="159.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (30 samples, 7.43%)</title><rect x="36.6337%" y="165" width="7.4257%" height="15" fill="rgb(216,154,8)" fg:x="148" fg:w="30"/><text x="36.8837%" y="175.50">e`&lt;T as co..</text></g><g><title>e`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="44.0594%" y="165" width="0.2475%" height="15" fill="rgb(244,35,45)" fg:x="178" fg:w="1"/><text x="44.3094%" y="175.50"></text></g><g><title>e`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.74%)</title><rect x="44.3069%" y="165" width="0.7426%" height="15" fill="rgb(251,115,12)" fg:x="179" fg:w="3"/><text x="44.5569%" y="175.50"></text></g><g><title>e`DYLD-STUB$$realloc (1 samples, 0.25%)</title><rect x="45.2970%" y="149" width="0.2475%" height="15" fill="rgb(240,54,50)" fg:x="183" fg:w="1"/><text x="45.5470%" y="159.50"></text></g><g><title>e`__rdl_realloc (1 samples, 0.25%)</title><rect x="45.5446%" y="149" width="0.2475%" height="15" fill="rgb(233,84,52)" fg:x="184" fg:w="1"/><text x="45.7946%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.50%)</title><rect x="46.5347%" y="101" width="0.4950%" height="15" fill="rgb(207,117,47)" fg:x="188" fg:w="2"/><text x="46.7847%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.50%)</title><rect x="47.0297%" y="101" width="0.4950%" height="15" fill="rgb(249,43,39)" fg:x="190" fg:w="2"/><text x="47.2797%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.50%)</title><rect x="47.5248%" y="85" width="0.4950%" height="15" fill="rgb(209,38,44)" fg:x="192" fg:w="2"/><text x="47.7748%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.74%)</title><rect x="47.5248%" y="101" width="0.7426%" height="15" fill="rgb(236,212,23)" fg:x="192" fg:w="3"/><text x="47.7748%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.25%)</title><rect x="48.0198%" y="85" width="0.2475%" height="15" fill="rgb(242,79,21)" fg:x="194" fg:w="1"/><text x="48.2698%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (8 samples, 1.98%)</title><rect x="46.5347%" y="117" width="1.9802%" height="15" fill="rgb(211,96,35)" fg:x="188" fg:w="8"/><text x="46.7847%" y="127.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.25%)</title><rect x="48.2673%" y="101" width="0.2475%" height="15" fill="rgb(253,215,40)" fg:x="195" fg:w="1"/><text x="48.5173%" y="111.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 3.71%)</title><rect x="45.0495%" y="165" width="3.7129%" height="15" fill="rgb(211,81,21)" fg:x="182" fg:w="15"/><text x="45.2995%" y="175.50">e`al..</text></g><g><title>e`alloc::raw_vec::finish_grow (12 samples, 2.97%)</title><rect x="45.7921%" y="149" width="2.9703%" height="15" fill="rgb(208,190,38)" fg:x="185" fg:w="12"/><text x="46.0421%" y="159.50">e`a..</text></g><g><title>libsystem_malloc.dylib`_realloc (10 samples, 2.48%)</title><rect x="46.2871%" y="133" width="2.4752%" height="15" fill="rgb(235,213,38)" fg:x="187" fg:w="10"/><text x="46.5371%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.25%)</title><rect x="48.5149%" y="117" width="0.2475%" height="15" fill="rgb(237,122,38)" fg:x="196" fg:w="1"/><text x="48.7649%" y="127.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (27 samples, 6.68%)</title><rect x="50.0000%" y="149" width="6.6832%" height="15" fill="rgb(244,218,35)" fg:x="202" fg:w="27"/><text x="50.2500%" y="159.50">e`&lt;T as c..</text></g><g><title>e`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.25%)</title><rect x="56.6832%" y="149" width="0.2475%" height="15" fill="rgb(240,68,47)" fg:x="229" fg:w="1"/><text x="56.9332%" y="159.50"></text></g><g><title>e`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="56.9307%" y="149" width="0.2475%" height="15" fill="rgb(210,16,53)" fg:x="230" fg:w="1"/><text x="57.1807%" y="159.50"></text></g><g><title>e`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.50%)</title><rect x="57.1782%" y="149" width="0.4950%" height="15" fill="rgb(235,124,12)" fg:x="231" fg:w="2"/><text x="57.4282%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.50%)</title><rect x="57.9208%" y="117" width="0.4950%" height="15" fill="rgb(224,169,11)" fg:x="234" fg:w="2"/><text x="58.1708%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="59.1584%" y="85" width="0.2475%" height="15" fill="rgb(250,166,2)" fg:x="239" fg:w="1"/><text x="59.4084%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.50%)</title><rect x="59.4059%" y="85" width="0.4950%" height="15" fill="rgb(242,216,29)" fg:x="240" fg:w="2"/><text x="59.6559%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (8 samples, 1.98%)</title><rect x="58.4158%" y="101" width="1.9802%" height="15" fill="rgb(230,116,27)" fg:x="236" fg:w="8"/><text x="58.6658%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.50%)</title><rect x="59.9010%" y="85" width="0.4950%" height="15" fill="rgb(228,99,48)" fg:x="242" fg:w="2"/><text x="60.1510%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.50%)</title><rect x="59.9010%" y="69" width="0.4950%" height="15" fill="rgb(253,11,6)" fg:x="242" fg:w="2"/><text x="60.1510%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (10 samples, 2.48%)</title><rect x="58.4158%" y="117" width="2.4752%" height="15" fill="rgb(247,143,39)" fg:x="236" fg:w="10"/><text x="58.6658%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.50%)</title><rect x="60.3960%" y="101" width="0.4950%" height="15" fill="rgb(236,97,10)" fg:x="244" fg:w="2"/><text x="60.6460%" y="111.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 3.71%)</title><rect x="57.6733%" y="149" width="3.7129%" height="15" fill="rgb(233,208,19)" fg:x="233" fg:w="15"/><text x="57.9233%" y="159.50">e`al..</text></g><g><title>e`alloc::raw_vec::finish_grow (14 samples, 3.47%)</title><rect x="57.9208%" y="133" width="3.4653%" height="15" fill="rgb(216,164,2)" fg:x="234" fg:w="14"/><text x="58.1708%" y="143.50">e`a..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.50%)</title><rect x="60.8911%" y="117" width="0.4950%" height="15" fill="rgb(220,129,5)" fg:x="246" fg:w="2"/><text x="61.1411%" y="127.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (24 samples, 5.94%)</title><rect x="62.1287%" y="133" width="5.9406%" height="15" fill="rgb(242,17,10)" fg:x="251" fg:w="24"/><text x="62.3787%" y="143.50">e`&lt;T as ..</text></g><g><title>e`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.74%)</title><rect x="68.0693%" y="133" width="0.7426%" height="15" fill="rgb(242,107,0)" fg:x="275" fg:w="3"/><text x="68.3193%" y="143.50"></text></g><g><title>e`DYLD-STUB$$realloc (1 samples, 0.25%)</title><rect x="68.8119%" y="117" width="0.2475%" height="15" fill="rgb(251,28,31)" fg:x="278" fg:w="1"/><text x="69.0619%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="69.5545%" y="69" width="0.2475%" height="15" fill="rgb(233,223,10)" fg:x="281" fg:w="1"/><text x="69.8045%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="69.8020%" y="69" width="0.2475%" height="15" fill="rgb(215,21,27)" fg:x="282" fg:w="1"/><text x="70.0520%" y="79.50"></text></g><g><title>e`alloc::raw_vec::finish_grow (6 samples, 1.49%)</title><rect x="69.0594%" y="117" width="1.4851%" height="15" fill="rgb(232,23,21)" fg:x="279" fg:w="6"/><text x="69.3094%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 1.49%)</title><rect x="69.0594%" y="101" width="1.4851%" height="15" fill="rgb(244,5,23)" fg:x="279" fg:w="6"/><text x="69.3094%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 1.24%)</title><rect x="69.3069%" y="85" width="1.2376%" height="15" fill="rgb(226,81,46)" fg:x="280" fg:w="5"/><text x="69.5569%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.50%)</title><rect x="70.0495%" y="69" width="0.4950%" height="15" fill="rgb(247,70,30)" fg:x="283" fg:w="2"/><text x="70.2995%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.50%)</title><rect x="70.0495%" y="53" width="0.4950%" height="15" fill="rgb(212,68,19)" fg:x="283" fg:w="2"/><text x="70.2995%" y="63.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 2.23%)</title><rect x="68.8119%" y="133" width="2.2277%" height="15" fill="rgb(240,187,13)" fg:x="278" fg:w="9"/><text x="69.0619%" y="143.50">e..</text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.50%)</title><rect x="70.5446%" y="117" width="0.4950%" height="15" fill="rgb(223,113,26)" fg:x="285" fg:w="2"/><text x="70.7946%" y="127.50"></text></g><g><title>e`alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="71.0396%" y="133" width="0.2475%" height="15" fill="rgb(206,192,2)" fg:x="287" fg:w="1"/><text x="71.2896%" y="143.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (12 samples, 2.97%)</title><rect x="71.7822%" y="117" width="2.9703%" height="15" fill="rgb(241,108,4)" fg:x="290" fg:w="12"/><text x="72.0322%" y="127.50">e`&lt;..</text></g><g><title>e`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.25%)</title><rect x="74.7525%" y="117" width="0.2475%" height="15" fill="rgb(247,173,49)" fg:x="302" fg:w="1"/><text x="75.0025%" y="127.50"></text></g><g><title>e`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="75.0000%" y="117" width="0.2475%" height="15" fill="rgb(224,114,35)" fg:x="303" fg:w="1"/><text x="75.2500%" y="127.50"></text></g><g><title>e`__rdl_alloc (1 samples, 0.25%)</title><rect x="75.2475%" y="117" width="0.2475%" height="15" fill="rgb(245,159,27)" fg:x="304" fg:w="1"/><text x="75.4975%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.99%)</title><rect x="75.4950%" y="85" width="0.9901%" height="15" fill="rgb(245,172,44)" fg:x="305" fg:w="4"/><text x="75.7450%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.74%)</title><rect x="75.7426%" y="69" width="0.7426%" height="15" fill="rgb(236,23,11)" fg:x="306" fg:w="3"/><text x="75.9926%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.25%)</title><rect x="76.2376%" y="53" width="0.2475%" height="15" fill="rgb(205,117,38)" fg:x="308" fg:w="1"/><text x="76.4876%" y="63.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 1.98%)</title><rect x="75.4950%" y="117" width="1.9802%" height="15" fill="rgb(237,72,25)" fg:x="305" fg:w="8"/><text x="75.7450%" y="127.50">e..</text></g><g><title>e`alloc::raw_vec::finish_grow (8 samples, 1.98%)</title><rect x="75.4950%" y="101" width="1.9802%" height="15" fill="rgb(244,70,9)" fg:x="305" fg:w="8"/><text x="75.7450%" y="111.50">e..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (4 samples, 0.99%)</title><rect x="76.4851%" y="85" width="0.9901%" height="15" fill="rgb(217,125,39)" fg:x="309" fg:w="4"/><text x="76.7351%" y="95.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (6 samples, 1.49%)</title><rect x="77.4752%" y="101" width="1.4851%" height="15" fill="rgb(235,36,10)" fg:x="313" fg:w="6"/><text x="77.7252%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.50%)</title><rect x="78.9604%" y="69" width="0.4950%" height="15" fill="rgb(251,123,47)" fg:x="319" fg:w="2"/><text x="79.2104%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.25%)</title><rect x="79.2079%" y="53" width="0.2475%" height="15" fill="rgb(221,13,13)" fg:x="320" fg:w="1"/><text x="79.4579%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="79.2079%" y="37" width="0.2475%" height="15" fill="rgb(238,131,9)" fg:x="320" fg:w="1"/><text x="79.4579%" y="47.50"></text></g><g><title>e`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.74%)</title><rect x="78.9604%" y="101" width="0.7426%" height="15" fill="rgb(211,50,8)" fg:x="319" fg:w="3"/><text x="79.2104%" y="111.50"></text></g><g><title>e`alloc::raw_vec::finish_grow (3 samples, 0.74%)</title><rect x="78.9604%" y="85" width="0.7426%" height="15" fill="rgb(245,182,24)" fg:x="319" fg:w="3"/><text x="79.2104%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.25%)</title><rect x="79.4554%" y="69" width="0.2475%" height="15" fill="rgb(242,14,37)" fg:x="321" fg:w="1"/><text x="79.7054%" y="79.50"></text></g><g><title>e`alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="79.7030%" y="101" width="0.2475%" height="15" fill="rgb(246,228,12)" fg:x="322" fg:w="1"/><text x="79.9530%" y="111.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.25%)</title><rect x="79.9505%" y="69" width="0.2475%" height="15" fill="rgb(213,55,15)" fg:x="323" fg:w="1"/><text x="80.2005%" y="79.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (2 samples, 0.50%)</title><rect x="79.9505%" y="85" width="0.4950%" height="15" fill="rgb(209,9,3)" fg:x="323" fg:w="2"/><text x="80.2005%" y="95.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (1 samples, 0.25%)</title><rect x="80.1980%" y="69" width="0.2475%" height="15" fill="rgb(230,59,30)" fg:x="324" fg:w="1"/><text x="80.4480%" y="79.50"></text></g><g><title>e`&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.25%)</title><rect x="80.1980%" y="53" width="0.2475%" height="15" fill="rgb(209,121,21)" fg:x="324" fg:w="1"/><text x="80.4480%" y="63.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (3 samples, 0.74%)</title><rect x="79.9505%" y="101" width="0.7426%" height="15" fill="rgb(220,109,13)" fg:x="323" fg:w="3"/><text x="80.2005%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="80.4455%" y="85" width="0.2475%" height="15" fill="rgb(232,18,1)" fg:x="325" fg:w="1"/><text x="80.6955%" y="95.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (1 samples, 0.25%)</title><rect x="80.6931%" y="101" width="0.2475%" height="15" fill="rgb(215,41,42)" fg:x="326" fg:w="1"/><text x="80.9431%" y="111.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (16 samples, 3.96%)</title><rect x="77.4752%" y="117" width="3.9604%" height="15" fill="rgb(224,123,36)" fg:x="313" fg:w="16"/><text x="77.7252%" y="127.50">e`be..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.50%)</title><rect x="80.9406%" y="101" width="0.4950%" height="15" fill="rgb(240,125,3)" fg:x="327" fg:w="2"/><text x="81.1906%" y="111.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (3 samples, 0.74%)</title><rect x="81.4356%" y="117" width="0.7426%" height="15" fill="rgb(205,98,50)" fg:x="329" fg:w="3"/><text x="81.6856%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="82.1782%" y="117" width="0.2475%" height="15" fill="rgb(205,185,37)" fg:x="332" fg:w="1"/><text x="82.4282%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.25%)</title><rect x="82.4257%" y="117" width="0.2475%" height="15" fill="rgb(238,207,15)" fg:x="333" fg:w="1"/><text x="82.6757%" y="127.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (48 samples, 11.88%)</title><rect x="71.2871%" y="133" width="11.8812%" height="15" fill="rgb(213,199,42)" fg:x="288" fg:w="48"/><text x="71.5371%" y="143.50">e`bevy_solver::sol..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.50%)</title><rect x="82.6733%" y="117" width="0.4950%" height="15" fill="rgb(235,201,11)" fg:x="334" fg:w="2"/><text x="82.9233%" y="127.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (6 samples, 1.49%)</title><rect x="83.1683%" y="133" width="1.4851%" height="15" fill="rgb(207,46,11)" fg:x="336" fg:w="6"/><text x="83.4183%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.74%)</title><rect x="84.6535%" y="133" width="0.7426%" height="15" fill="rgb(241,35,35)" fg:x="342" fg:w="3"/><text x="84.9035%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.25%)</title><rect x="85.3960%" y="133" width="0.2475%" height="15" fill="rgb(243,32,47)" fg:x="345" fg:w="1"/><text x="85.6460%" y="143.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (100 samples, 24.75%)</title><rect x="61.3861%" y="149" width="24.7525%" height="15" fill="rgb(247,202,23)" fg:x="248" fg:w="100"/><text x="61.6361%" y="159.50">e`bevy_solver::solver::algs::hamiltonia..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.50%)</title><rect x="85.6436%" y="133" width="0.4950%" height="15" fill="rgb(219,102,11)" fg:x="346" fg:w="2"/><text x="85.8936%" y="143.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (1 samples, 0.25%)</title><rect x="86.1386%" y="149" width="0.2475%" height="15" fill="rgb(243,110,44)" fg:x="348" fg:w="1"/><text x="86.3886%" y="159.50"></text></g><g><title>e`hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.25%)</title><rect x="86.3861%" y="149" width="0.2475%" height="15" fill="rgb(222,74,54)" fg:x="349" fg:w="1"/><text x="86.6361%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="86.6337%" y="149" width="0.2475%" height="15" fill="rgb(216,99,12)" fg:x="350" fg:w="1"/><text x="86.8837%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.25%)</title><rect x="86.8812%" y="149" width="0.2475%" height="15" fill="rgb(226,22,26)" fg:x="351" fg:w="1"/><text x="87.1312%" y="159.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (156 samples, 38.61%)</title><rect x="48.7624%" y="165" width="38.6139%" height="15" fill="rgb(217,163,10)" fg:x="197" fg:w="156"/><text x="49.0124%" y="175.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="87.1287%" y="149" width="0.2475%" height="15" fill="rgb(213,25,53)" fg:x="352" fg:w="1"/><text x="87.3787%" y="159.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (3 samples, 0.74%)</title><rect x="87.3762%" y="165" width="0.7426%" height="15" fill="rgb(252,105,26)" fg:x="353" fg:w="3"/><text x="87.6262%" y="175.50"></text></g><g><title>e`hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.25%)</title><rect x="88.1188%" y="165" width="0.2475%" height="15" fill="rgb(220,39,43)" fg:x="356" fg:w="1"/><text x="88.3688%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.74%)</title><rect x="88.3663%" y="165" width="0.7426%" height="15" fill="rgb(229,68,48)" fg:x="357" fg:w="3"/><text x="88.6163%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 1.24%)</title><rect x="89.1089%" y="165" width="1.2376%" height="15" fill="rgb(252,8,32)" fg:x="360" fg:w="5"/><text x="89.3589%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.25%)</title><rect x="90.3465%" y="165" width="0.2475%" height="15" fill="rgb(223,20,43)" fg:x="365" fg:w="1"/><text x="90.5965%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.50%)</title><rect x="90.5941%" y="165" width="0.4950%" height="15" fill="rgb(229,81,49)" fg:x="366" fg:w="2"/><text x="90.8441%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.25%)</title><rect x="91.0891%" y="165" width="0.2475%" height="15" fill="rgb(236,28,36)" fg:x="368" fg:w="1"/><text x="91.3391%" y="175.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (224 samples, 55.45%)</title><rect x="36.1386%" y="181" width="55.4455%" height="15" fill="rgb(249,185,26)" fg:x="146" fg:w="224"/><text x="36.3886%" y="191.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.25%)</title><rect x="91.3366%" y="165" width="0.2475%" height="15" fill="rgb(249,174,33)" fg:x="369" fg:w="1"/><text x="91.5866%" y="175.50"></text></g><g><title>e`hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.25%)</title><rect x="91.5842%" y="181" width="0.2475%" height="15" fill="rgb(233,201,37)" fg:x="370" fg:w="1"/><text x="91.8342%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 1.49%)</title><rect x="91.8317%" y="181" width="1.4851%" height="15" fill="rgb(221,78,26)" fg:x="371" fg:w="6"/><text x="92.0817%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.25%)</title><rect x="93.3168%" y="181" width="0.2475%" height="15" fill="rgb(250,127,30)" fg:x="377" fg:w="1"/><text x="93.5668%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="93.5644%" y="181" width="0.2475%" height="15" fill="rgb(230,49,44)" fg:x="378" fg:w="1"/><text x="93.8144%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.25%)</title><rect x="93.8119%" y="181" width="0.2475%" height="15" fill="rgb(229,67,23)" fg:x="379" fg:w="1"/><text x="94.0619%" y="191.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (269 samples, 66.58%)</title><rect x="27.7228%" y="197" width="66.5842%" height="15" fill="rgb(249,83,47)" fg:x="112" fg:w="269"/><text x="27.9728%" y="207.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.25%)</title><rect x="94.0594%" y="181" width="0.2475%" height="15" fill="rgb(215,43,3)" fg:x="380" fg:w="1"/><text x="94.3094%" y="191.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (1 samples, 0.25%)</title><rect x="94.3069%" y="197" width="0.2475%" height="15" fill="rgb(238,154,13)" fg:x="381" fg:w="1"/><text x="94.5569%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 1.24%)</title><rect x="94.5545%" y="197" width="1.2376%" height="15" fill="rgb(219,56,2)" fg:x="382" fg:w="5"/><text x="94.8045%" y="207.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (321 samples, 79.46%)</title><rect x="16.5842%" y="213" width="79.4554%" height="15" fill="rgb(233,0,4)" fg:x="67" fg:w="321"/><text x="16.8342%" y="223.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="95.7921%" y="197" width="0.2475%" height="15" fill="rgb(235,30,7)" fg:x="387" fg:w="1"/><text x="96.0421%" y="207.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (2 samples, 0.50%)</title><rect x="96.0396%" y="213" width="0.4950%" height="15" fill="rgb(250,79,13)" fg:x="388" fg:w="2"/><text x="96.2896%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.25%)</title><rect x="96.5347%" y="213" width="0.2475%" height="15" fill="rgb(211,146,34)" fg:x="390" fg:w="1"/><text x="96.7847%" y="223.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (357 samples, 88.37%)</title><rect x="8.6634%" y="229" width="88.3663%" height="15" fill="rgb(228,22,38)" fg:x="35" fg:w="357"/><text x="8.9134%" y="239.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="96.7822%" y="213" width="0.2475%" height="15" fill="rgb(235,168,5)" fg:x="391" fg:w="1"/><text x="97.0322%" y="223.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (1 samples, 0.25%)</title><rect x="97.0297%" y="229" width="0.2475%" height="15" fill="rgb(221,155,16)" fg:x="392" fg:w="1"/><text x="97.2797%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.25%)</title><rect x="97.2772%" y="229" width="0.2475%" height="15" fill="rgb(215,215,53)" fg:x="393" fg:w="1"/><text x="97.5272%" y="239.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (383 samples, 94.80%)</title><rect x="3.2178%" y="245" width="94.8020%" height="15" fill="rgb(223,4,10)" fg:x="13" fg:w="383"/><text x="3.4678%" y="255.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.50%)</title><rect x="97.5248%" y="229" width="0.4950%" height="15" fill="rgb(234,103,6)" fg:x="394" fg:w="2"/><text x="97.7748%" y="239.50"></text></g><g><title>e`core::hash::BuildHasher::hash_one (1 samples, 0.25%)</title><rect x="98.0198%" y="245" width="0.2475%" height="15" fill="rgb(227,97,0)" fg:x="396" fg:w="1"/><text x="98.2698%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="98.2673%" y="245" width="0.2475%" height="15" fill="rgb(234,150,53)" fg:x="397" fg:w="1"/><text x="98.5173%" y="255.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (396 samples, 98.02%)</title><rect x="0.7426%" y="261" width="98.0198%" height="15" fill="rgb(228,201,54)" fg:x="3" fg:w="396"/><text x="0.9926%" y="271.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.25%)</title><rect x="98.5149%" y="245" width="0.2475%" height="15" fill="rgb(222,22,37)" fg:x="398" fg:w="1"/><text x="98.7649%" y="255.50"></text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (400 samples, 99.01%)</title><rect x="0.2475%" y="277" width="99.0099%" height="15" fill="rgb(237,53,32)" fg:x="1" fg:w="400"/><text x="0.4975%" y="287.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.50%)</title><rect x="98.7624%" y="261" width="0.4950%" height="15" fill="rgb(233,25,53)" fg:x="399" fg:w="2"/><text x="99.0124%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.25%)</title><rect x="99.2574%" y="277" width="0.2475%" height="15" fill="rgb(210,40,34)" fg:x="401" fg:w="1"/><text x="99.5074%" y="287.50"></text></g><g><title>dyld`start (403 samples, 99.75%)</title><rect x="0.0000%" y="533" width="99.7525%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="403"/><text x="0.2500%" y="543.50">dyld`start</text></g><g><title>e`main (403 samples, 99.75%)</title><rect x="0.0000%" y="517" width="99.7525%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="403"/><text x="0.2500%" y="527.50">e`main</text></g><g><title>e`std::rt::lang_start_internal (403 samples, 99.75%)</title><rect x="0.0000%" y="501" width="99.7525%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="403"/><text x="0.2500%" y="511.50">e`std::rt::lang_start_internal</text></g><g><title>e`std::rt::lang_start::_{{closure}} (403 samples, 99.75%)</title><rect x="0.0000%" y="485" width="99.7525%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="403"/><text x="0.2500%" y="495.50">e`std::rt::lang_start::_{{closure}}</text></g><g><title>e`std::sys_common::backtrace::__rust_begin_short_backtrace (403 samples, 99.75%)</title><rect x="0.0000%" y="469" width="99.7525%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="403"/><text x="0.2500%" y="479.50">e`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>e`e::main (403 samples, 99.75%)</title><rect x="0.0000%" y="453" width="99.7525%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="403"/><text x="0.2500%" y="463.50">e`e::main</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::hamiltonian_tour_repeatless (403 samples, 99.75%)</title><rect x="0.0000%" y="437" width="99.7525%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="403"/><text x="0.2500%" y="447.50">e`bevy_solver::solver::algs::hamiltonian::hamiltonian_tour_repeatless</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="421" width="99.7525%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="403"/><text x="0.2500%" y="431.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="405" width="99.7525%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="403"/><text x="0.2500%" y="415.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="389" width="99.7525%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="403"/><text x="0.2500%" y="399.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="373" width="99.7525%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="403"/><text x="0.2500%" y="383.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="357" width="99.7525%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="403"/><text x="0.2500%" y="367.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="341" width="99.7525%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="403"/><text x="0.2500%" y="351.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="325" width="99.7525%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="403"/><text x="0.2500%" y="335.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="309" width="99.7525%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="403"/><text x="0.2500%" y="319.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path (403 samples, 99.75%)</title><rect x="0.0000%" y="293" width="99.7525%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="403"/><text x="0.2500%" y="303.50">e`bevy_solver::solver::algs::hamiltonian::find_hamiltonian_path</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.25%)</title><rect x="99.5050%" y="277" width="0.2475%" height="15" fill="rgb(206,124,46)" fg:x="402" fg:w="1"/><text x="99.7550%" y="287.50"></text></g><g><title>all (404 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="404"/><text x="0.2500%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.25%)</title><rect x="99.7525%" y="533" width="0.2475%" height="15" fill="rgb(222,201,40)" fg:x="403" fg:w="1"/><text x="100.0025%" y="543.50"></text></g></svg></svg>